#!/usr/bin/env python3

import click
import os
import meraki
import logging
import sys

"""
Optional: export env vars to access Meraki dashboard

    export APIKEY=myApiKey
    export ORG_ID=myOrgID
"""


def validate_apikey(ctx, apikey):
    """
    Validate API Key"
    """
    try:
        m = meraki.DashboardAPI(
            api_key=apikey, print_console=False, output_log=False, suppress_logging=True
        )
        m.organizations.getOrganizations()
        return apikey
    except:
        raise click.BadParameter("Provided API Key can't access Meraki Dashboard")


@click.command(
    help="""Add or remove patterns from Content Filtering URL Blocking in Meraki Dashboard.\n
PATTERNS is a single element or comma separated list."""
)
@click.option(
    "--apikey",
    required=True,
    prompt=True,
    help="API Key",
    callback=validate_apikey,
    default=os.environ.get("APIKEY", ""),
)
@click.option(
    "--orgid",
    required=True,
    prompt=True,
    help="Organization ID",
    default=os.environ.get("ORGID", ""),
)
@click.argument("patterns")
@click.option(
    "--intent",
    required=True,
    prompt=True,
    help="Allow or Block",
    type=click.Choice(["allow", "block"], case_sensitive=False),
)
@click.option(
    "--action",
    required=True,
    prompt=True,
    help="Add or Remove pattern",
    type=click.Choice(["add", "remove"], case_sensitive=False),
)
@click.option(
    "--filternetwork",
    required=False,
    prompt=False,
    help="Filter network by name - case insensitive",
    default=False,
)
@click.option(
    "--dry",
    help="Dry run flag",
    is_flag=True,
)
def updateContentFiltering(apikey, orgid, patterns, action, intent, dry, filternetwork):

    patterns = patterns.split(",")  # split patterns, create a list

    m = meraki.DashboardAPI(
        api_key=apikey, print_console=False, output_log=False, suppress_logging=True
    )
    try:
        networks = m.organizations.getOrganizationNetworks(orgid)
    except:
        click.echo(
            click.style(
                f"‚ùå ‚ùå ‚ùå ERROR: can't get networks for organizazion {orgid} ‚ùå ‚ùå ‚ùå",
                fg="red",
            )
        )
        sys.exit()

    for net in networks:
        netId = net.get("id")
        netName = net.get("name")
        #if not filternetwork or filternetwork.upper() in netName.upper():
        if filternetwork:
            click.echo(
                f"‚ö†Ô∏è\tNET FILTER APPLIED: {filternetwork}\tNETWORK NAME: {netName}"
            )
            if filternetwork.upper() not in netName.upper():
                if "appliance" in net.get(
                    "productTypes"
                ):  # content filtering only works for networks that include security appliances
                    if intent.lower() == "block":
                        try:
                            urlPatterns = m.appliance.getNetworkApplianceContentFiltering(
                                netId
                            ).get("blockedUrlPatterns")
                        except:
                            click.echo(
                                f"‚ùåERROR‚ùåERROR‚ùå\tNETWORK\t{netId}\tNAME:\t{netName}‚ùåERROR‚ùåERROR‚ùå"
                            )
                    elif intent.lower() == "allow":
                        try:
                            urlPatterns = m.appliance.getNetworkApplianceContentFiltering(
                                netId
                            ).get("allowedUrlPatterns")
                        except:
                            click.echo(
                                f"‚ùåERROR‚ùåERROR‚ùå\tNETWORK\t{netId}\tNAME:\t{netName}‚ùåERROR‚ùåERROR‚ùå"
                            )

                    drift = list(set(urlPatterns).difference(set(patterns)))
                    if (  # verify if any action is required for the network
                        action.lower() == "remove"
                        and urlPatterns == drift
                        or action.lower() == "add"
                        and set(patterns).issubset(set(urlPatterns))
                    ):
                        click.echo(
                            click.style(
                                f"‚úÖ\tNO ACTION REQUIRED NETWORK\t{netId}\tNAME\t{netName}",
                                fg="green",
                            )
                        )
                    else:
                        click.echo(
                            click.style(
                                f"üí™\tFIXING NETWORK\t{netId}\tNAME\t{netName}", fg="yellow"
                            )
                        )
                        if action.lower() == "remove":
                            urlPatterns = drift
                        elif action.lower() == "add":
                            urlPatterns.extend(patterns)
                            urlPatterns = list(set(urlPatterns))
                        if intent.lower() == "block":
                            try:
                                if not dry:
                                    m.appliance.updateNetworkApplianceContentFiltering(
                                        networkId=netId, blockedUrlPatterns=urlPatterns
                                    )
                                click.echo(
                                    click.style(
                                        f"üí™\tNETWORK\t{netId}\tNAME:\t{netName}\tUPDATED BLOCKED URL PATTERNS",
                                        fg="green",
                                    )
                                )
                            except:
                                click.echo(
                                    f"‚ùåERROR‚ùåERROR‚ùå\tUPDATING NETWORK\t{netId}\tNAME:\t{netName}‚ùåERROR‚ùåERROR‚ùå"
                                )
                        elif intent.lower() == "allow":
                            try:
                                if not dry:
                                    m.appliance.updateNetworkApplianceContentFiltering(
                                        networkId=netId, allowedUrlPatterns=urlPatterns
                                    )
                                click.echo(
                                    click.style(
                                        f"üí™\tNETWORK\t{netId}\tNAME\t{netName}\tUPDATED ALLOWED URL PATTERNS",
                                        fg="green",
                                    )
                                )
                            except:
                                click.echo(
                                    f"‚ùåERROR‚ùåERROR‚ùå\tUPDATING NETWORK\t{netId}\tNAME\t{netName}‚ùåERROR‚ùåERROR‚ùå"
                                )
                else:
                    click.echo(
                        click.style(
                            f"üö´\t NO SECURITY APPLIANCES IN NETWORK\t\t{netId}\t NAME:\t{netName}",
                            fg="yellow",
                        )
                    )

if __name__ == '__main__':
    updateContentFiltering()
